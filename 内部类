内部类是在一个类的内部再定义的一个类，比如A类中定义一个B类，那么B类相对A类来说就称为内部类，A类对于B类来说就是外部类。
内部类的特点：
    编译之后可生成独立的字节码文件。
    内部类可以直接访问外部类的私有成员，而不破坏封装。
    内部类可以为外部类提供必要的内部功能组件。
    

内部类主要可分为：
1.成员内部类
    在类的内部定义，与实例变量、实例方法统计变的类
    是外部类的一个实例部分，创建内部类对象时，必须依赖外部类
    当外部类和成员内部类存在同名属性时，是优先访问内部类属性
    成员内部类中是不能定义静态成员的，但是可以包含静态常量
    
    创建内部类对象的两种方法：
    1.两步
        //先创建一个外部象
        Outer outer = new Outer();
        //再创建内部类对象
        Inner inner = outer.new Inner();   //注意，此处引入的包应该是 import com.yyy.demo11.Body; 和  import com.yyy.demo11.Body.Header;
        
     2.一步到位
        Inner inner = new Outer().new Inner();
        
     
    

2.静态内部类
3.局部内部类
4.匿名内部类


//Inner即为成员内部类
public class Outer {

    private int id = 10;
    public void out(){
        System.out.println("这是外部类的方法");
    }

    public class Inner {
        public void in() {
            System.out.println("这是内部类方法");
        }
        
        //可以获得外部类的私有属性和方法
        public void getID() {
            System.out.println(id);
        }
    }
}

//一下为内部类的调用，通过外部类实例化内部类
public class Application {
    public static void main(String[] args) {
        Outer outer = new Outer();
        //通过这个外部类来实例化内部类
        Outer.Inner inner = outer.new Inner();
        inner.in();
        inner.getID();

    }
}



//如果将局部内部类的前面变成 public static class ，则此时该类则为静态内部类
//静态内部类只能调用其外部类的静态的方法和变量


public class Outer {
}

class A{
}
//一个java类中可以有多个class类，但是只能有一个public class



匿名内部类的例子

public class Test {
    public static void main(String[] args) {
        //没有名字初始化类，不用将实例保存到变量中
        new Aplle().eat();

        UserService userService = new UserService() {
            @Override
            public void hello() {

            }
        };
    }
}

class Aplle{
    public void eat(){
        System.out.println("1");
    }
}

interface UserService{
    void hello();
}


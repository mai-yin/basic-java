/*类与对象的关系，
类是一种抽象的数据类型，它是对某一类实物的整体描述，定义，但是不能代表某一具体的事物；如动物，植物等；
对象是抽象概念的具体实例，比如说张三就是人的一个具体的实例；

什么是面向对象，面向对象编程(Object-Orinented Programming, OOP);
面向对象编程的本质就是：以类的方式组织代码，以对象的组织(封装)数据；
三大特征：封装、继承、多态；
*/





/*创建与初始化对象
一个类里面只包含两种东西，即：属性和方法；  需要注意的是类的首字母应该大写。
下面介绍例子:学生类*/

public class Student {

    //属性
    String name; //没赋值之前的默认值是null
    int age;    //没赋值之前的默认值是0

    //方法
    public void study(){
        //this代表当前这个类
        System.out.println(this.name+"在学习");
    }

}

/*
  对于一个项目应该只存在一个main方法；
  创建的类是抽象的，如果要使用类则必须先把类实例化，创建出对应的对象；
  
  创建与初始化对象，
  使用new关键字创建对象，使用new关键字创建对象时，除了分配内存空间之外，
  还会给创建好的对象进行默认的初始化以及对类中构造器的调用；
  创建方法为     类 对象名 = new 类();
*/

 public static void main(String[] args) {

        //类，抽象的
        //类实例化后会返回一个自己的对象！
        //student对象就是一个Student类的具体实例！

        /* 创建与初始化对象，
        使用new关键字创建对象，使用new关键字创建对象时，除了分配内存空间之外，
        还会给创建好的对象进行默认的初始化以及对类中构造器的调用

         */
        Student xiaoming = new Student();
        Student yyy = new Student();

        xiaoming.name = "小明";
        xiaoming.age = 14;

        System.out.println(xiaoming.name);
        System.out.println(xiaoming.age);
        System.out.println(yyy.name);
        System.out.println(yyy.age);
    }
}





/*构造器详解
类的构造器也称为构造方法，是在进行创建对象的时候必须要调用的，
    并且构造器有以下两个特点:
        1.必须和类的名字相同
        2.必须没有返回类型，也不能写void

    一个类即使什么都不写，它也会存在一个方法，即默认的构造方法(无参构造)
   
   构造器的作用
        1.使用new关键字，本质是在调用构造器
        2.用来初始化值
        
   构造器又可以分为无参构造和有参构造，两者可以并存，并且随着你输入的参数类型的变化，构造器会自动选择相对应的构造方法；
   
   注意点:定义有参构造之后，如果想调用无参构造，则必须要显示的定义一个无参构造
   快捷键 alt + insert 会生成一个构造器


下面为例子:
*/
public class Person {

    String name;

    //无参构造
    public Person(){

    }

    //有参构造；一旦定义了有参构造，无参就必须显示定义
    public Person(String name){
        this.name = "yyy";
    }
}





/*类与对象的小总结
1.类与对象
  类是一个模板，对象是一个具体的实例；
  类是抽象的，对象是实例的；
  
2.方法
  了解掌握方法的定义和调用；
  
3.对应的调用
  引用类型：八大基本类型
  对象是通过引用来操作的：栈-->堆(地址)
  
4.属性
  字段Field  成员变量
  默认初始化：
      数字： 0   0.0
      char： u0000
      boolen： flase
      引用： null
      
5.对象的创建和使用
  必须使用new 关键字创建对象， 必须要有构造器
  例如  Person yyy = new Person();
  对象的属性  yyy.name
  对象的方法  yyy.study()
  
6.类中只包含两个东西
  静态的属性    属性
  动态的行为    方法

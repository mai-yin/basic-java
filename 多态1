多态：即同一个方法可以更具发送的对象不同而采用多种不同的行为方式；
  一个对象的实际类型是确定的，但可以指向对象的引用的类型有很多（如父类，有关系的类等）
  
  
   Person person = new Student()的意义
   这句话实际上是实例化了一个子类的对象，然后让他以父类展示出来了
   
   
  /*
多态注意事项：
1.多态是方法的多态，属性没有多态
2.父类和子类，有联系    类型转换异常！ ClassCastException!
3.多态存在的条件： 1.得有继承关系，2.方法需要重写，3.父类的引用指向子类对象！ Father f1 = new Son();

        一些不能被重写的方法
        1.static 方法，属于类，不属于实例；
        2.final 常量；
        3.private方法， 私有不能重写。
 */
 
 //一个对象的实际类型是确定的，但是可以指向这个对象的引用类型就不确定了，如父类的引用指向子类的类型
 
 //对象能执行哪些方法主要看左边的类型，和右边关系不大
    子类指向的引用，可以调用子类里自带的方法以及从父类里继承过来的方法；
    而父类指向的引用，可以指向子类，但是不能调用子类独有的方法；
        当父类和子类里都有同一种方法时，只要子类没有重写父类的方法，创建的指向子类的父类对象，先调用父类的方法
        如果子类重写了父类的方法，则该对象会调用重写后的子类的方法
 
 
 例子如下：
 
 
 //父类
public class Person {

    public void run(){
        System.out.println("run");
    }
}


//子类
public class Student extends Person {
    @Override   //重写了父类的run()方法
    public void run() {
        System.out.println("not run");
    }

    public void eat(){
        System.out.println("eat");
    }

}


public class Application {

    public static void main(String[] args) {

        //一个对象的实际类型是确定的
        //new Student();
        //new Person();

        //但可以指向这个对象的引用类型就不确定了，父类的引用指向子类的类型
        
        //对象能执行哪些方法，主要看左边的类型，和右边关系不大
        
        Student s1 = new Student(); //子类指向的引用 ，能调用Student里的方法和从父类继承过来的方法
        Person s2 = new Student(); //父类指向的引用 ，可以指向子类，但是不能调用子类独有的方法
        Object s3 = new Student();

        s2.run(); //子类重写了父类的方法，执行子类的方法
        s1.run();

        s1.eat();

        //s2.eat()报错
        //因为Person里没有eat方法，所以s2不能调用eat方法
        //但是如果父类和子类里都有同一种方法，如上面的run()，只要子类没有重写父类
        //则s2就调用父类的run(),如果子类重写了父类的方法则s2调用重写后的子类的run()
    }

}
